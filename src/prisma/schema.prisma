generator client {
    provider      = "prisma-client-js"
    output        = "../app/generated/prisma"
    binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    MODERATOR
}

model User {
    id            String   @id @default(nanoid()) @db.VarChar(255)
    name          String   @db.VarChar(255)
    email         String   @unique @db.VarChar(255)
    emailVerified Boolean  @default(true) @map("email_verified")
    image         String?  @db.VarChar(255)
    role          Role     @default(USER)
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    // auth
    sessions      Session[]
    accounts      Account[]
    verifications Verification[]

    // app
    postAuthors PostAuthor[]
    likes       Like[]
    comments    Comment[]
    reports     Report[]
    followers   Follow[]              @relation("UserFollowers")
    following   Follow[]              @relation("UserFollowing")
    leaderboard LeaderboardSnapshot[]

    @@map("users")
}

model Session {
    id        String   @id @default(nanoid()) @db.VarChar(255)
    userId    String   @map("user_id") @db.VarChar(255)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String   @unique
    expiresAt DateTime @map("expires_at")
    ipAddress String?  @map("ip_address")
    userAgent String?  @map("user_agent")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("sessions")
}

model Account {
    id                    String    @id @default(nanoid()) @db.VarChar(255)
    userId                String    @map("user_id") @db.VarChar(255)
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accountId             String    @map("account_id") @db.VarChar(255)
    providerId            String    @map("provider_id") @db.VarChar(255)
    accessToken           String?   @map("access_token")
    refreshToken          String?   @map("refresh_token")
    accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
    refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
    scope                 String?   @db.Text
    idToken               String?   @map("id_token")
    password              String?   @db.VarChar(255)
    createdAt             DateTime  @default(now()) @map("created_at")
    updatedAt             DateTime  @updatedAt @map("updated_at")

    @@map("accounts")
}

model Verification {
    id         String   @id @default(nanoid()) @db.VarChar(255)
    identifier String   @db.VarChar(255)
    value      String   @db.VarChar(255)
    expiresAt  DateTime @map("expires_at")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    User       User?    @relation(fields: [userId], references: [id])
    userId     String?  @db.VarChar(255)

    @@map("verifications")
}

model Post {
    id          String   @id @default(nanoid()) @db.VarChar(255)
    title       String   @db.VarChar(255)
    description String   @db.Text
    previewUrl  String?  @map("preview_url") @db.VarChar(255)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    authors     PostAuthor[]
    likes       Like[]
    comments    Comment[]
    reports     Report[]
    leaderboard LeaderboardSnapshot[]

    @@map("posts")
}

model PostAuthor {
    id     String @id @default(nanoid()) @db.VarChar(255)
    userId String @map("user_id") @db.VarChar(255)
    postId String @map("post_id") @db.VarChar(255)

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
    @@map("post_authors")
}

model Like {
    id        String   @id @default(nanoid()) @db.VarChar(255)
    userId    String   @map("user_id") @db.VarChar(255)
    postId    String   @map("post_id") @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at")

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
    @@map("likes")
}

model Comment {
    id        String   @id @default(nanoid()) @db.VarChar(255)
    userId    String   @map("user_id") @db.VarChar(255)
    postId    String   @map("post_id") @db.VarChar(255)
    content   String   @db.Text
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@map("comments")
}

model Report {
    id        String   @id @default(nanoid()) @db.VarChar(255)
    userId    String   @map("user_id") @db.VarChar(255)
    postId    String   @map("post_id") @db.VarChar(255)
    reason    String   @db.Text
    createdAt DateTime @default(now()) @map("created_at")

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@map("reports")
}

model Follow {
    id          String   @id @default(nanoid()) @db.VarChar(255)
    followerId  String   @map("follower_id") @db.VarChar(255)
    followingId String   @map("following_id") @db.VarChar(255)
    createdAt   DateTime @default(now()) @map("created_at")

    follower  User @relation("UserFollowers", fields: [followerId], references: [id])
    following User @relation("UserFollowing", fields: [followingId], references: [id])

    @@unique([followerId, followingId])
    @@map("follows")
}

model LeaderboardSnapshot {
    id        String   @id @default(nanoid()) @db.VarChar(255)
    month     String   @db.VarChar(20) // e.g., "2025-09"
    userId    String   @map("user_id") @db.VarChar(255)
    postId    String?  @map("post_id") @db.VarChar(255)
    score     Int
    rank      Int
    createdAt DateTime @default(now()) @map("created_at")

    user User  @relation(fields: [userId], references: [id])
    post Post? @relation(fields: [postId], references: [id])

    @@map("leaderboard_snapshots")
}
